<program> ::= <using_directive>* <include_directive>* <statement>*
<using_directive> ::= "using" <package> <newline>
<include_directive> ::= "include" <package> <newline>
<statement> ::= <on_join_event> | <command> | <label_declaration> | <goto_statement> | <if_statement> | <label_call> | <comment> | <else_statement> | <package_unwrap>
<on_join_event> ::= "#onJoin" <newline> <statement>*
<command> ::= "msg" <string> <newline>
            | "cpemsg" <cpe_message_field> <string> <newline>
            | "localmsg" <cpe_msg_with_chat> <string> <newline>
            | "menumsg" <cpe_message_field> <string> <newline>
            | "delay" <package_or_number> <newline>
            | "jump" <label> <newline>
            | "goto" <label> <newline>
            | "call" <label> <newline>
            | "quit" <newline>
            | "terminate" <newline>
            | "newthread" <label> <newline>
            | "cmd" <external_command> <newline>
            | "set" <package> <value> <newline>
            | "setadd" <package> <package_or_number> <newline>
            | "setsub" <package> <package_or_number> <newline>
            | "setmul" <package> <package_or_number> <newline>
            | "setdiv" <package> <package_or_number> <newline>
            | "setmod" <package> <package_or_number> <newline>
            | "setpow" <package> <package_or_number> <newline>
            | "setsin" <package> <package_or_number> <newline>
            | "setcos" <package> <package_or_number> <newline>
            | "settan" <package> <package_or_number> <newline>
            | "setsqrt" <package> <package_or_number> <newline>
            | "setrandrange" <package> <package_or_number> <package_or_number> <newline>
            | "setrandrangedecimal" <package> <package_or_number> <package_or_number> <newline>
            | "setrandlist" <package> <value_list> <newline>
            | "setround" <package> <newline>
            | "setroundup" <package> <newline>
            | "setrounddown" <package> <newline>
            | "setfromhexcolor" <package> <hex_color> <newline>
            | "settohexcolor" <package> <package> <newline>
            | "show" <package> <package>* <newline>
            | "kill" <string_literal>? <newline>
            | "resetdata" <reset_type> <string_literal>? <newline>
            | "item" <item_action> <package> <newline>
            | "freeze" <newline>
            | "unfreeze" <newline>
            | "look" <package> <newline>
            | "stare" <package>? <newline>
            | "env" <env_property> <package> <newline>
            | "motd" <motd_arguments>* <newline>
            | "setspawn" <package> <newline>
            | "setdeathspawn" <package> <newline>
            | "allowmbrepeat" <newline>
            | "reply" <number> "|" <string_literal> "|" <label> <newline>
            | "reply" "clear" <newline>
            | "replysilent" <number> "|" <string_literal> "|" <label> <newline>
            | "replysilent" "clear" <newline>
            | "tempblock" <external_command> <newline>
            | "tempchunk" <external_command> <newline>
            | "boost" <external_command> <newline>
            | "effect" <external_command> <newline>
            | "reach" <package_or_number> <newline>
            | "setblockid" <package> <package> <newline>
            | "definehotkey" <string_literal> "|" <key_name> "|" <hotkey_modifiers>* <newline>
            | "undefinehotkey" <key_name> "|" <hotkey_modifiers>* <newline>
            | "placeblock" <package> <package> <newline>
            | "changemodel" <package>? <newline>
            | "award" <package> <newline>
            | "setsplit" <package> <string_literal>? <newline>
            | "setlength" <package> <string_literal>? <newline>
            | "setdirvector" <package> <package> <package> <package_or_number> <package_or_number> <newline>
            | "clickevent" <click_mode> "register" <label> <newline>
            | "clickevent" <click_mode> "unregister" <newline>
            | "chatevent" "sync" "register" <label> <label> <value_list> <newline>
            | "chatevent" "sync" "unregister" <newline>
            | "error" <string_literal> <newline>
            | "gui" <gui_option> <gui_value> <newline>
            | "gui" "reset" <newline>
<label_declaration> ::= <label> <newline> <statement>*
<goto_statement> ::= "goto" <label> <newline>
<if_statement> ::= "if" <package> <command> <newline>
                  | "if" <package> "|" <comparison_operator> "|" <if_comparison_value> <command> <newline>
                  | "if" "item" <package> <command> <newline>
                  | "if" "label" <label> <command> <newline>
                  | "ifnot" <package> <command> <newline>
                  | "ifnot" <package> "|" <comparison_operator> "|" <if_comparison_value> <command> <newline>
                  | "ifnot" "item" <package> <command> <newline>
                  | "ifnot" "label" <label> <command> <newline>
<else_statement> ::= "else" <command> <newline>
<label_call> ::= <label> "|" <arguments>* <newline>
<arguments> ::= <package>
<comment> ::= "//" <string_literal> <newline>
<package_unwrap> ::= "{" <package> "}"
<string> ::= <any_character>*
<string_literal> ::= "\"" <any_character>* "\""
<external_command> ::= <package>*
<package> ::= <safe_command_char>*
<label> ::= "#" <safe_command_char>*
<safe_command_char> ::= [!-^] | [`-~] | "~"
<number> ::= [0-9]+
<package_or_number> ::= <package> | <number>
<newline> ::= "\n"
<whitespace> ::= [ \t]+
<comparison_operator> ::= "=" | ">" | ">=" | "<" | "<="
<if_comparison_value> ::= <package> | <string_literal> | <number>
<no_space_string> ::= [A-Za-z0-9_]+
<cpe_message_field> ::= "top1" | "top2" | "top3" | "bot1" | "bot2" | "bot3" | "announce" | "bigannounce" | "smallannounce"
<cpe_msg_with_chat> ::= <cpe_message_field> | "chat"
<reset_type> ::= "packages" | "items" | "saved" | "locals"
<item_action> ::= "get" | "take"
<env_property> ::= "sky" | "cloud" | "cloudspeed" | "cloudheight" | "fog" | "shadow" | "sun" | "skybox" | "lavalight" | "lamplight" | "weather" | "maxfog" | "expfog"
<motd_arguments> ::= <package> | <number> | <string_literal>
<key_name> ::= <package>
<hotkey_modifiers> ::= "ctrl" | "shift" | "alt" | "async"
<click_mode> ::= "async" | "sync"
<value> ::= <string> | <package_unwrap>
<value_list> ::= <value> ("|" <value>)*
<any_character> ::= "\u00A0" | "\u00A1" | "\u00A2" | "\u00A3" | "\u00A5" | "\u00A7" | "\u00AA" | "\u00AC" |
    "\u00B0" | "\u00B1" | "\u00B2" | "\u00B6" | "\u00B7" | "\u00BC" | "\u00BD" | "\u00BF" |
    "\u00C4" | "\u00C5" | "\u00C6" | "\u00C7" | "\u00C9" | "\u00D1" | "\u00D6" | "\u00DC" |
    "\u00E0" | "\u00E1" | "\u00E2" | "\u00E4" | "\u00E5" | "\u00E6" | "\u00E7" | "\u00E8" |
    "\u00E9" | "\u00EA" | "\u00EB" | "\u00EC" | "\u00EE" | "\u00EF" | "\u00F2" | "\u00F3" |
    "\u00F4" | "\u00F6" | "\u00F7" | "\u00F9" | "\u00FA" | "\u00FB" | "\u00FF" | "\u0192" |
    "\u2022" | "\u207F" | "\u20A7" | "\u2190" | "\u2191" | "\u2192" | "\u2193" | "\u2194" |
    "\u2195" | "\u21A8" | "\u2219" | "\u221A" | "\u221E" | "\u221F" | "\u2229" | "\u2248" |
    "\u2261" | "\u2264" | "\u2265" | "\u2302" | "\u2310" | "\u2320" | "\u2321" | "\u2500" |
    "\u2502" | "\u250C" | "\u2510" | "\u2514" | "\u2518" | "\u251C" | "\u2524" | "\u2534" |
    "\u253C" | "\u2550" | "\u2551" | "\u2552" | "\u2553" | "\u2554" | "\u2555" | "\u2556" |
    "\u2557" | "\u2558" | "\u2559" | "\u255A" | "\u255B" | "\u255C" | "\u255D" | "\u255E" |
    "\u255F" | "\u2560" | "\u2561" | "\u2562" | "\u2563" | "\u2564" | "\u2565" | "\u2566" |
    "\u2567" | "\u2568" | "\u2569" | "\u256A" | "\u256B" | "\u256C" | "\u2580" | "\u2584" |
    "\u2588" | "\u258C" | "\u2590" | "\u2591" | "\u2592" | "\u2593" | "\u25A0" | "\u25B2" |
    "\u25BA" | "\u25BC" | "\u25CB" | "\u25D8" | "\u25D9" | "\u25AC" | "\u263A" | "\u263B" |
    "\u263C" | "\u2640" | "\u2642" | "\u2660" | "\u2663" | "\u2665" | "\u2666" | "\u266A" |
    "\u266B" | "\u0393" | "\u03A3" | "\u03A6" | "\u0398" | "\u03A9" | "\u03B1" | "\u03B2" |
    "\u03B4" | "\u03B5" | "\u03BC" | "\u03C0" | "\u03C3" | "\u03C4" | "\u03C6" | [ -~]

// Strings are not represented like string literals, as they must not have quotes surrounding them.

// Action Section: Commands for player interaction and script control.

// msg [message]: Sends a message to the player. Supports placeholders:
//   - @p: Player's name (with +).
//   - @nick: Player's natural name (e.g., Mike).
//   - @color: Player's color code.

// cpemsg [cpe message field] <message>: Sends messages to special chat fields (top/bottom/center).
//   - Fields: top1, top2, top3, bot1, bot2, bot3, announce, bigannounce, smallannounce.
//   - Max 64 characters (color codes count as 2).
//   - "announce" fields disappear after 5 seconds. Others stay until reset.
//   - Use blank message to reset.

// localmsg [cpe message field] <message>: Sends messages to all players in the level.
//   - Use "chat" for normal chat.

// menumsg [cpe message field] <message>: Announcement messages that stay on screen.
//   - Fields: announce, bigannounce, smallannounce.

// wait [number or package]: Pauses the script for specified milliseconds.

// jump [#label]: Jumps to the specified label and continues execution.

// goto [#label]: Jumps to the label and clears the call stack (doesn't return from "call").

// call [#label]: Jumps to the label, returns after "quit".

// quit: Stops script execution or returns from "call".

// terminate: Stops script execution completely.

// newthread [#label]: Starts a new thread to run the label, ignores delays. Add delay after for synchronization.

// cmd [command] <command arguments>: Runs external commands. Supports @p and @nick.

// set [package] [value]: Sets package value. Use {package} to assign value from another package.

// setadd [package] [number or package]: Adds value to package.

// setsub [package] [number or package]: Subtracts value from package.

// setmul [package] [number or package]: Multiplies package value.

// setdiv [package] [number or package]: Divides package value.

// setmod [package] [number or package]: Sets package to remainder of division.

// setpow [package] [number or package]: Sets package to power of value.

// setsin [package] [number or package]: Sets package to sine of value.

// setcos [package] [number or package]: Sets package to cosine of value.

// settan [package] [number or package]: Sets package to tangent of value (radians).

// setsqrt [package] [number or package]: Sets package to square root of value.

// setrandrange [package] [number or package] [number or package]: Sets package to random integer within range.

// setrandrangedecimal [package] [number or package] [number or package]: Sets package to random decimal within range.

// setrandlist [package] [value1]|[value2]|[value3]...: Sets package to random value from list.

// setround [package]: Rounds package value to nearest integer.

// setroundup [package]: Rounds package value up to next integer.

// setrounddown [package]: Rounds package value down to previous integer.

// setfromhexcolor [package] [hexColor]: Converts hex color to RGB components in package (myColor[0]=R, myColor[1]=G, myColor[2]=B).

// settohexcolor [package] [colorStructure]: Converts RGB color structure to hex color in package.

// show [package] <another package>...: Displays package values for debugging.

// show: Displays all non-saved package values.

// kill <message>: Kills player with optional public death message.

// resetdata [type] <pattern>: Resets data (packages, items, saved, locals). Pattern supports * and ?.

// item [get/take] [ITEM_NAME]: Gives or takes item from player (underscores for spaces).

// freeze: Freezes player.

// unfreeze: Unfreezes player.

// look [block coordinates]: Makes player look at coordinates.

// stare <block coordinates>: Forces player to stare at coordinates. No coordinates to unfreeze.

// env [property] [value]: Temporarily changes environment properties (sky, cloud, fog, etc.).

// motd [motd arguments]: Sends MOTD to control hacks. /help map motd for flags. motd ignore resets.

// setspawn [block coords]: Sets player's spawn.

// setdeathspawn [block coords]: Sets player's death spawn.

// allowmbrepeat: Allows triggering same walk-through MB repeatedly.

// reply [option number]|[text]|[#label]: Sets up reply option. Max 6 replies (4-6 not recommended). reply clear clears.

// replysilent: Reply without notifications. replysilent clear clears.

// tempblock [args]: Shortcut for cmd tempblock.

// tempchunk [args]: Shortcut for cmd tempchunk.

// boost [args]: Shortcut for cmd boost.

// effect [args]: Shortcut for cmd effect.

// reach [distance]: Sets player's reach distance.

// setblockid [package] [block coordinates]: Sets package to block ID. Doesn't see tempblock/tempchunk changes.

// definehotkey [input args]|[key name]|<modifiers>: Defines hotkey. /input [input args]. async calls #inputAsync.

// undefinehotkey [key name]|<modifiers>: Removes hotkey.

// placeblock [block] [block coordinates]: Places block permanently.

// changemodel <model>: Changes player's model. No arguments to reset.

// award [award]: Gives player award.

// setsplit [package] <splitter>: Splits package into array of packages.

// setlength [package] <splitter>: Sets package.Length to string length.

// setdirvector [xPackage] [yPackage] [zPackage] [yaw] [pitch]: Sets packages to 3D direction vector.

// clickevent [async/sync] register [#label]: Registers click event label.

// clickevent [async/sync] unregister: Unregisters click event label.

// chatevent sync register [#cancelLogic] [#onChat] [phrase]|...: Registers chat event labels. Not for os scripts.

// chatevent sync unregister: Unregisters chat event.

// error [message]: Forces script error.

// gui [option] [value]: Changes GUI properties (crosshair, hand, hotbar, barSize, barColor). gui reset resets.

// If Statement Section: Conditional execution of actions.

// if [package] [Action]: Executes [Action] if [package] is "true".

// if [package]|=|[package to compare to] [Action]: Executes [Action] if [package] equals [package to compare to] (case-insensitive).
//   - Use quotes for literal comparison (no spaces).
//   - Example: if runArg2|=|password msg ...

// if [package]|[operator]|[number or package] [Action]: Executes [Action] based on comparison with operators (=, >, >=, <, <=).
//   - Example: if myGemCount|<|bowGemPrice msg ...

// if item [ITEM_NAME] [Action]: Executes [Action] if player has the specified item.

// if label [#label] [Action]: Executes [Action] if the label exists (runArgs ignored).

// ifnot [condition] [Action]: Reverses the logic of "if". Executes [Action] if the condition is false.
//   - Example: ifnot recognized msg ...

// else [Action]: Executes [Action] if the previous "if" or "ifnot" condition was false.
//   - Example: ifnot recognized msg ... else msg ...

// Preset Packages Section: Predefined variables for script context and player data.

// MBCoords: Space-separated coordinates of the message block running the script.
// MBX, MBY, MBZ: Individual X, Y, Z coordinates of the message block.
// PlayerCoords: Space-separated player block coordinates.
// PlayerHeldBlock: ID of the block the player is holding.
// PlayerX, PlayerY, PlayerZ: Individual player block coordinates.
// PlayerCoordsPrecise: Space-separated precise player coordinates (32 per-block).
// PlayerPX, PlayerPY, PlayerPZ: Individual precise player coordinates.
// PlayerCoordsDecimal: Space-separated decimal player coordinates.
// PlayerYaw: Player's camera yaw (left/right) in degrees.
// PlayerPitch: Player's camera pitch (up/down) in degrees.
// PlayerPronouns: Player's selected pronouns (e.g., they/them).
// msgDelay: Delay value scaled by the length of the previous msg.
// epochMS: Milliseconds since 1970-01-01.
// cef: "true" if player has cef installed.
// webclient: "true" if player is on the web client.
// mobile: "true" if player is on a mobile device.
// actionCount: Number of actions executed so far.
// actionLimit: Maximum actions allowed before script termination.
// runArg[number]: Arguments passed to the script's label. runArg0 is the label name.
//   - Example: #entryDenied|The_Club|you're_not_cool.
//   - Unspecified runArgs are empty or 0.
//   - RunArgs can be changed with goto, jump, call, newthread, and reply.

// Special Labels Section: Labels with predefined triggers.

// #input: Called when player uses /input command or triggers a hotkey.
//   - runArg1: First word of /input command.
//   - runArg2: Remaining words of /input command.
//   - Underscores are converted to spaces.

// #onJoin: Called automatically when a player joins a map.

// Click Label Section: Packages for click event information.

// When a script is triggered by a click event (clickevent action), the following packages provide click details:

// click.button: Mouse button used (Left, Right, Middle).
// click.coords: Block coordinates of the click. Out-of-map coordinates indicate no block was clicked.
// click.yaw: Player's yaw angle at the time of the click (more precise than PlayerYaw).
// click.pitch: Player's pitch angle at the time of the click (more precise than PlayerPitch).
// click.face: Side of the block that was clicked (None, AwayX, TowardsX, AwayY, TowardsY, AwayZ, TowardsZ).

// Important Notes Section: Key rules and capabilities of the scripting language.

// Action names are case-sensitive.
// Label names are case-sensitive.
// Package names are case-insensitive.

// Package unwrapping: Packages can be inserted into most text within the script.
//   - Allows dynamic script behavior by using package values to modify actions or package names.
//   - Excludes action names, "if", "ifnot", and label names at the start of a line.

// Top Level Statements Section: Script-wide option toggles and inclusions.

// Top-level statements configure script behavior.
//   - Written once at the top of the script.
//   - Default is inactive (false) if not written.

// "using" statements:
//   using cef: Enables sending CEF commands via the msg action.
//   using quit_resets_runargs: Resets runArgs (except 0) on "quit" action.
//   using allow_include: Allows the script to be included in other scripts.
//   using local_packages: Treats packages prefixed with "l_" as local (instance-specific).
//     - Local packages are unique to each script instance.
//     - They start with blank values.
//     - Newthreads create separate instances.
//     - resetdata supports a "locals" category.

// "include" statement:
//   include [scriptname]: Includes the content of another script.
//     - Similar to C "#include".
//     - Example: include libs/advlib
//     - Allows using other scripts as reusable function libraries.
//     - OS map scripts use "os/" prefix: include os/goodlyay+24
//     - Included script actions respect the original script's "using" statements.

// Conventions: Coding style and best practices.

// "using", "include", and labels: No leading spaces.
// Other statements: Four leading spaces.
// if statements: Single-line, use "call" and labels for complex conditions.
// Labels: Conventionally end with "quit".
// Package Definitions: It is conventional to use lowercase.
// Label Definitions: It is conventional to use camel case.

// Syntax Clarifications: Syntax clarifications to ensure understanding.

// Strings: Not string literals (except in if/ifnot comparisons).

// Single-line Comments: Starts with //, has to be on a seperate line from code.
// Multi-line Comments: There are no multiline comments in this language. To have more than one line of comments, use multiple single-line comments.

// Include statements have no filename, however, the files on the server side have a .nas extension.

// Strings are never enclosed with quotes, even in edge cases, as those are treated as literal characters in strings.
// Meanwhile, string literals always are.

// Here is an example showing a proper use case of strings and string literals:
// if state|=|"greet" msg Hello, how are you today?

// There is never a space after a pipe being used as a deliminator.
// Examples:
// if rating|=|1 msg You gave us too low of a rating!
// call #handle|init|5
